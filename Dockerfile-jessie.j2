FROM python:{{ pythonversion }}-slim-jessie

ENV LC_ALL=C

# Install global packages
RUN set -x \
    && apt-get update \
    && apt-get install make wget xz-utils xvfb libxrender1 libfontconfig1 libssl-dev -y \
    && rm -rf /var/lib/apt/lists/*

# Install wkhtmltopdf
ENV WKHTMLTOX_VERSION=0.12.4
RUN set -x \
    && cd /tmp \
    && wget -q https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/${WKHTMLTOX_VERSION}/wkhtmltox-${WKHTMLTOX_VERSION}_linux-generic-amd64.tar.xz \
    && tar xf wkhtmltox-${WKHTMLTOX_VERSION}_linux-generic-amd64.tar.xz \
    && cp wkhtmltox/bin/wkhtmltopdf /usr/bin/wkhtmltopdf \
    && chmod 755 /usr/bin/wkhtmltopdf \
    && rm -rf /tmp/*

# Install LibreSSL
ENV LIBRESSL_VERSION=2.6.4 \
    GPG_LIBRESSL="A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5" \
    LIBCRYPTO_NAME="libcrypto.so.42.0.0"
RUN set -x \
    && BUILD_DEPS=" \
        gcc \
        automake \
        autoconf \
        git \
        libtool \
        perl" \
    && apt-get update \
    && apt-get install -y ${BUILD_DEPS} \
    && cd /tmp \
    && LIBRESSL_TARBALL="libressl-${LIBRESSL_VERSION}.tar.gz" \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \
    && echo "Verifying ${LIBRESSL_TARBALL} using GPG..." \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \
    && gpg --import libressl.asc \
    && FINGERPRINT="$(LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 \
     | sed -n "s#Primary key fingerprint: \(.*\)#\1#p")" \
    && if [ -z "${FINGERPRINT}" ]; then echo "Warning! Invalid GPG signature!" && exit 1; fi \
    && if [ "${FINGERPRINT}" != "${GPG_LIBRESSL}" ]; then echo "Warning! Wrong GPG fingerprint!" && exit 1; fi \
    && echo "All seems good, now unpacking ${LIBRESSL_TARBALL}..." \
    && tar xzf ${LIBRESSL_TARBALL} \
    && cd /tmp/libressl-${LIBRESSL_VERSION} \
    && ./configure \
    && make check \
    && make install \
    && apt-get purge -y --auto-remove ${BUILD_DEPS} \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/*

# Install pillow dependencies
RUN set -x \
    && BUILD_DEPS=" \
        gcc \
        git" \
    && RUNTIME_DEPS=" \
        tcl-dev \
        tk-dev \
        libjpeg-dev \
        zlib1g-dev \
        libtiff-dev \
        libfreetype6-dev \
        liblcms2-2 \
        libwebp-dev \
        libpng-dev \
        libopenjpeg-dev" \
    && apt-get update \
    && apt-get install -y ${BUILD_DEPS} ${RUNTIME_DEPS} \
    && cd /tmp \
    && git clone --recursive https://github.com/kornelski/pngquant.git \
    && cd pngquant \
    && ./configure \
    && make \
    && make install \
    && apt-get purge -y --auto-remove ${BUILD_DEPS} \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/*

# Install waitforit
ENV WAITFORIT_VERSION="v1.4.0"
RUN set -x \
    && BUILD_DEPS=" \
        curl" \
    && apt-get update \
    && apt-get install -y ${BUILD_DEPS} \
    && curl -fsSLR -o /usr/local/bin/su-exec https://github.com/javabean/su-exec/releases/download/v0.2/su-exec.$(dpkg --print-architecture | awk -F- '{ print $NF }') \
    && chmod 755 /usr/local/bin/su-exec \
    && curl -o /usr/local/bin/waitforit -sSL https://github.com/maxcnunes/waitforit/releases/download/$WAITFORIT_VERSION/waitforit-linux_amd64 \
    && chmod +x /usr/local/bin/waitforit \
    && apt-get purge -y --auto-remove ${BUILD_DEPS} \
    && rm -rf /var/lib/apt/lists/*



# COPY docker-entrypoint.sh /usr/local/bin/entrypoint.sh

# ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
