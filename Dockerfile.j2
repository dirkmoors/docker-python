FROM python:{{ pythonversion }}-alpine

ENV WAITFORIT_VERSION="v1.4.0" \
    LC_ALL=C \
    LIBRESSL_VERSION=2.5.4 \
    GPG_LIBRESSL="A1EB 079B 8D3E B92B 4EBD  3139 663A F51B D5E4 D8D5" \
    LIBCRYPTO_NAME="libcrypto.so.41.0.1" \
    PHANTOMJS_ARCHIVE="phantomjs.tar.gz"

# Install LibreSSL
RUN set -x \
    && echo "@commuedge https://nl.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
    && echo "@commuedge https://dl-3.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories \
    && NB_CORES=${BUILD_CORES-$(getconf _NPROCESSORS_CONF)} \
    && BUILD_DEPS=" \
        build-base \
        linux-headers \
        ca-certificates \
        automake \
        autoconf \
        git \
        tar \
        libtool \
        pcre-dev \
        zlib-dev \
        binutils \
        gnupg" \
    && apk -U add \
        ${BUILD_DEPS} \
        pcre \
        zlib \
        libgcc \
        libstdc++ \
        su-exec \
        openssl \
        bind-tools \
        tini@commuedge \
    && cd /tmp \
    && LIBRESSL_TARBALL="libressl-${LIBRESSL_VERSION}.tar.gz" \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL} \
    && echo "Verifying ${LIBRESSL_TARBALL} using GPG..." \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/${LIBRESSL_TARBALL}.asc \
    && wget -q http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl.asc \
    && gpg --import libressl.asc \
    && FINGERPRINT="$(LANG=C gpg --verify ${LIBRESSL_TARBALL}.asc ${LIBRESSL_TARBALL} 2>&1 \
     | sed -n "s#Primary key fingerprint: \(.*\)#\1#p")" \
    && if [ -z "${FINGERPRINT}" ]; then echo "Warning! Invalid GPG signature!" && exit 1; fi \
    && if [ "${FINGERPRINT}" != "${GPG_LIBRESSL}" ]; then echo "Warning! Wrong GPG fingerprint!" && exit 1; fi \
    && echo "All seems good, now unpacking ${LIBRESSL_TARBALL}..." \
    && tar xzf ${LIBRESSL_TARBALL} \
    && cd /tmp/libressl-${LIBRESSL_VERSION} \
    && ./configure \
    && make check \
    && make install \
    && apk del --purge ${BUILD_DEPS} \
    && rm -rf /tmp/*

# Install pillow dependencies
COPY contrib/pillow /tmp/pillow
RUN set -v \
    && BUILD_PKGS='git gcc g++ bash curl' \
    && PILLOW_DEPS='jpeg-dev zlib-dev tiff-dev lcms2-dev freetype-dev openjpeg-dev tk-dev tcl-dev' \
    && apk add --no-cache ${PILLOW_DEPS} ${BUILD_PKGS} \
    && cd /tmp/pillow \
        && ./install_imagequant.sh \
        && ./install_webp.sh \
        && cd - \
    && apk del --purge ${BUILD_PKGS} \
    && rm -rf /tmp/*

# Install phantomjs
COPY contrib/phantomjs /tmp/phantomjs
RUN tar -xf /tmp/phantomjs/$PHANTOMJS_ARCHIVE -C /tmp/ \
    && cp -R /tmp/etc/fonts /etc/ \
    && cp -R /tmp/lib/* /lib/ \
    && cp -R /tmp/lib64 / \
    && cp -R /tmp/usr/lib/* /usr/lib/ \
    && cp -R /tmp/usr/lib/x86_64-linux-gnu /usr/ \
    && cp -R /tmp/usr/share/* /usr/share/ \
    && cp /tmp/usr/local/bin/phantomjs /usr/bin/ \
    && rm -rf /tmp/*

# Install waitforit
RUN set -x \
    && BASE_PKGS='su-exec bash curl' \
    && apk add --no-cache make ${BASE_PKGS} \
    && curl -o /usr/local/bin/waitforit -sSL https://github.com/maxcnunes/waitforit/releases/download/$WAITFORIT_VERSION/waitforit-linux_amd64 \
    && chmod +x /usr/local/bin/waitforit \
    && apk del --purge curl

COPY docker-entrypoint.sh /usr/local/bin/entrypoint.sh

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
